=title Reading from LDAP in Perl using Net::LDAP
=timestamp 2013-12-03T09:30:01
=indexes Net::LDAP
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

LDAP stands for <a href="http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">Lightweight Directory Access Protocol</a>. It is usually used to fetch (and sometimes update) data in a directory of people. For example the employees and students of a University.

For example, <a href="http://en.wikipedia.org/wiki/Active_Directory">Active Directory</a>, which is used in Microsoft Windows based networks to hold the accounts of all he users, provides a way to access it via LDAP.

Using Net::LDAP can provide a way to interact with this database. For example you might build an in-house web application and instead of managing your own user database, you could let the users authenticate
using their username/password in the Windows network.

=abstract end


There are several <a href="http://www.keutel.de/directory/public_ldap_servers.html">publicly accessible LDAP servers</a> you can use to check your code. We are going to use the one published by
The <a href="https://www.umich.edu/">University of Michigan</a>.


<h2>Fetching Data from an LDAP server</h2>


<code lang="perl">
#!/usr/bin/env perl
use strict;
use warnings;

use Net::LDAP;
my $server = "ldap.itd.umich.edu";
my $ldap = Net::LDAP->new( $server ) or die $@;
$ldap->bind;

my $result = $ldap->search(
    base   => "",
    filter => "(&(cn=Jame*) (sn=Woodw*))",
);

die $result->error if $result->code;

printf "COUNT: %s\n", $result->count;

foreach my $entry ($result->entries) {
    $entry->dump;
}
print "===============================================\n";

foreach my $entry ($result->entries) {
    printf "%s <%s>\n",
        $entry->get_value("displayName"),
        ($entry->get_value("mail") || '');
}

$ldap->unbind;
</code>

Running the above code will print:
<code>
COUNT: 2
------------------------------------------------------------------------
dn:uid=jrwood,ou=People,dc=umich,dc=edu

      objectClass: umichPerson
                   top
                   person
                   inetOrgPerson
                   posixAccount
              uid: jrwood
               sn: Woodworth
               cn: James R Woodworth
                   James Woodworth
        uidNumber: 75786
        gidNumber: 10
    homeDirectory: /users/jrwood
RealtimeBlockList: TRUE
               ou: Alumni
      displayName: James R Woodworth
          krbName: jrwood@umich.edu
------------------------------------------------------------------------
dn:uid=jwoodnh,ou=People,dc=umich,dc=edu

          krbName: jwoodnh@umich.edu
        uidNumber: 99417910
       loginShell: /bin/csh
               sn: Woodward
               ou: Alumni
             mail: jwoodnh@umich.edu
    homeDirectory: /users/jwoodnh
RealtimeBlockList: TRUE
      displayName: James Alan Woodward
              uid: jwoodnh
        gidNumber: 10
               cn: James Alan Woodward
                   James A Woodward
                   James Woodward
      objectClass: umichPerson
                   inetOrgPerson
                   organizationalPerson
                   person
                   top
                   posixAccount
===============================================
James R Woodworth <>
James Alan Woodward <jwoodnh@umich.edu>
</code>

First thing is to create a <a href="https://metacpan.org/pod/Net::LDAP">Net::LDAP</a> object providing the name of the LDAP server. Then we call <hl>bind</hl>. That is where we connect to the LDAP server.
In this example we used an <b>anonymous</b> connection. This usually only allows read access.

The <hl>search</hl> method returns a <a href="https://metacpan.org/pod/Net::LDAP::Search">Net::LDAP::Search</a> object. (This is what gets assigned to the <hl>$result</hl> variable.

The <hl>code</hl> method of the Net::LDAP::Search object returns 
<a href="https://metacpan.org/pod/Net::LDAP::Constant">Net::LDAP::Constant</a> which is 0 on success.
(Like the exit code of a Unix shell command.) So the Perl code to check for failure is
 
<code lang="perl">
if ($result->code) {
    die $result->error;
}
</code>

Or if you prefer:

<code lang="perl">
die $result->error if $result->code;
</code>

The example in the documentation uses the shell-style:

<code lang="perl">
$result->code && die $result->error;
</code>

that I personally don't find very readable.

If the search was successful the <hl>count</hl> method will return the number of hits.

The <hl>entries</hl> method returns all the hits. Each one is a
<a href="https://metacpan.org/pod/Net::LDAP::Entry">Net::LDAP::Entry</a> object.

In the first <hl>foreach</hl> loop we just <hl>dump</hl> the results for each entry. This is mostly
useful for debugging purposes, or when we try to explore what kind of fields does the server provide.

In the second <hl>foreach<hl> loop we used the <hl>get_value</hl> method to fetch specific fields
from the entry.

At the end of our interaction we <hl>unbind</hl> (disconnect) from the LDAP server.

<h2>Admin limit exceeded</h2>

If we widen our search, for example by searching for <hl>sn=W*</hl> instead of <hl>sn=Woodw*</hl>:

<code lang="perl">
my $result = $ldap->search(
    base   => "",
    filter => "(&(cn=Jame*) (sn=W*))",
);

die $result->error if $result->code;
</code>

We will get an <hl>Admin limit exceeded</hl> error code.

<h2>Bad filter</h2>

If we don't provide a <hl>filter</hl>, or if it is formatted incorrectly, we get a
<hl>Bad filter</hl> error code.

