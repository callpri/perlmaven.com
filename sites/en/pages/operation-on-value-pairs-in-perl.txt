=title Operations on value-pairs in Perl
=timestamp 2016-01-19T22:30:01
=indexes List::Util, pairs, unpairs, pairkeys, pairvalues, pairgrep, pairmap, pairfirst
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Recent versions of <a href="https://metacpan.org/pod/List::Util">List::Util</a> have introduced a number of functions
dealing with data in pairs without creating little hashes.

=abstract end

<h2>pairs</h2>

Given a list of values, e.g

<code lang="perl">
my @things = ('foo', 3, 'bar', 5, 'moo', 7);
</code>

The <hl>pairs</hl> function will return a list of pairs:

<code lang="perl">
(
   [ 'foo', 3 ],
   [ 'bar', 5 ],
   [ 'moo', 7 ],
)
</code>

actually the elements of the returned list are not just plain <a href="/array-references-in-perl">array references</a>,
but they are also objects of the <hl>List::Util::_Pair</hl> class. Besides de-referencing them as we could do with any
array reference we can also use the <hl>key</hl> and <hl>value</hl> methods to fetch the two elements of the small array.

<include file="examples/list_util_pairs.pl">

The result is the following:

<code>
0: foo
1: 3
0: bar
1: 5
0: moo
1: 7

key:   foo
value: 3
key:   bar
value: 5
key:   moo
value: 7
</code>

If the last element in the list does not have a pair because the number of elements is odd,
we get a <hl>Odd number of elements in pairs</hl> warning and <hl>undef</hl> is used instead of the last, missing value.


<h2>unpairs</h2>

<hl>unpairs</hl> is the opposite function. Given a list of pairs, it will flatten them into a single list:

<include file="examples/list_util_unpairs.pl">

The output is:

<code>
foo
3
bar
5
moo
7
</code>

The small arrays are expected to have 2 values. If they have more, the additional elements are disregarded.
If there are less than 2 elements, the missing elements are filled with <a href="/undef-and-defined-in-perl">undef</a>.
See the following example:

<include file="examples/list_util_unpairs_not_exact.pl">

The resulting output looks like this:

<code>
foo
3
bar
5
moo
Use of uninitialized value $d in say at list_util_unpairs_not_exact.pl line 11.

</code>

<h2>pairkeys</h2>

This function takes an even list, just as <hl>pairs</hl> did, but instead of a list of little array refs, it returns a list of values
built from the odd elements of the original, the value that would become the "keys" in the <hl>pairs</hl>.


If the number of elements in the original list is odd, the last element is considered as a key, without a value.
This will generated an <hl>Odd number of elements in pairkeys</hl> warning, but as the missing values is not
actually needed to the returned list, that will be the only warning we see.

This code:

<include file="examples/list_util_pairkeys.pl">

will generate this output:

<code>
Odd number of elements in pairkeys at list_util_pairkeys.pl line 9.
$VAR1 = [
          'foo',
          'bar',
          'moo',
          'zorg'
        ];
</code>

<h2>pairvalues</h2>

Similar to <hl>pairkeys</hl> but this will return the even elements of the original list, the elements that would become
the values if we used the <hl>pairs</hl> function.

If the supplied list has odd number of elements we'll get a warning <hl>Odd number of elements in pairvalues ...</hl>
and the last element of the resulting list will be also <hl>undef</hl>

This code

<include file="examples/list_util_pairvalues.pl">

will generate this output:

<code>
Odd number of elements in pairvalues at list_util_pairvalues.pl line 9.
$VAR1 = [
          3,
          5,
          7,
          undef
        ];
</code>


<h2>pairgrep</h2>

Similar to the built-in <a href="/filtering-values-with-perl-grep">grep</a> but works on pairs.

It goes over the given list pair-wise, assigning the odd values to <hl>$a</hl> and the even values to <hl>$b</hl>.
Then the block is executed an the value-pair that generates a true value will pass the filter.

For example this code:

<include file="examples/list_util_pairgrep.pl">

will execute the block 4 times and will generate this output:

<code>
$VAR1 = [
          6,
          5,
          9,
          8
        ];
</code>

<h2>pairfirst</h2>

The combination of the <hl>first</hl>  and the <hl>pairgrep</hl> functions.
Goes over the given list pair-wise, assigning the odd values to <hl>$a</hl> and the even values to <hl>$b</hl>.
Then the block is executed an the <b>first</b> value-pair that generates a true value will pass the filter.

For example this code:

<include file="examples/list_util_pairfirst.pl">

will execute the block twice and will generate this output:

<code>
$VAR1 = [
          6,
          5
        ];
</code>

<h2>pairmap</h2>

Similar to the built-in <a href="/transforming-a-perl-array-using-map">map</a> but works on pairs

For example this code:

<include file="examples/list_util_pairmap.pl">

will add every pair and generate the following output:

<code>
$VAR1 = [
          5,
          11,
          14,
          17
        ];
</code>



