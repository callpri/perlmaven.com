=title Stringification in classic Perl OOP
=timestamp 2014-02-05T14:30:01
=indexes overload, ref, blessed, Scalar::Util
=status show
=books advanced
=author szabgab
=comments_disqus_enable 0

=abstract start

In the previous article we saw <a href="/constructor-and-accessors-in-classic-perl-oop">how to create a class</a> using bless, but when we printed the instance object we got
<hl>My::Date=HASH(0x7f807c13c700)</hl>. This can be useful as it tells us we are dealing with a My::Date object, but on the
other hand it could print something more interesting. For example it could print a nice representation of the attributes:
<hl>Date(2013, 1, 27)</hl>

=abstract end

<h2>Stringification</h2>

means that we take an object and create a string format. It happens when the object is placed in
<a href="/what-are-string-and-numeric-contexts">string context</a>. For example when it is printed.

<h2>Operator overloading</h2>

In order to change the behavior of the My::Date class when an object of that type is placed in string context,
we need to "overload" the stringification operator. It can be done using the <a href="https://metacpan.org/pod/overload">overload</a> module.

This is what needs to be added to the Date.pm file in the <a href="/constructor-and-accessors-in-classic-perl-oop">previous example</a>.

<code lang="perl">
use overload
    '""' => 'stringify';

sub stringify {
    my ($self) = @_;
    return sprintf 'Date(%s, %s, %s)', $self->year, $self->month, $self->day;
}
</code>

The <hl>stringify</hl> subroutine, that can actually have any name, implements the actual stringification.
In some modules the author call it <hl>to_string</hl> or <hl>to_str</hl>, the actual name only matters because
the method can also be used on its own. A user could write:

<code lang="perl">
my $d = My::Date->new(year => 2013, month => 1, day => 27);
say $d->stringify;
</code>

This will print <hl>Date(2013, 1, 27)</hl>.

The first two lines in the above code, loads the <a href="https://metacpan.org/pod/overload">overload</a> module
and tells it that when the object is in string context, call the stringify method. When "use"-ing the overload
module we pass a set of key-value pairs. In this case the key is <hl>""</hl> (two double-quotes) and the value
is the name of the method that implements it.

The more interesting usage of this is when we just simply print <hl>$d</hl>:

<code lang="perl">
my $d = My::Date->new(year => 2013, month => 1, day => 27);
say $d;
</code>

In this case too, perl will call the <hl>stringify</hl> method of the <hl>My::Date</hl> class,
and will print the value returned by that function.

<h2>Which name-space does the object belong to?</h2>

Now that we change what a single object returns, we seem to have lost the previous information.
To which class does this object belong to?

No problem, the <hl>ref</hl> function can tell us this information:

<code lang="perl">
say ref $d;
</code>

will print <hl>My::Date</hl>.

Alternatively, one can use the <hl>blessed</hl> function of <a href="https://metacpan.org/pod/Scalar::Util">Scalar::Util</a>

<code lang="perl">
use Scalar::Util qw(blessed);
say blessed $d;
</code>

The advantage of the <hl>blessed</hl> function is that it will return <a href="/undef-and-defined-in-perl">undef</a> if
the values is not blessed, while <hl>ref</hl> can return values such as <hl>HASH</hl>, <hl>ARRAY</hl> etc. So if there
is a scalar variable that you want to know if it is blessed or not, it is simpler to write

<code lang="perl">
if (defined blessed $var) {
}
</code>

that to compare the result of <hl>ref</hl> to all the known types of references.


<h2>Full example</h2>

<code lang="perl">
package My::Date;
use strict;
use warnings;

sub new {
    my ($class, %args) = @_;
    return bless \%args, $class;
}

sub year {
    my ($self, $value) = @_;
    if (@_ == 2) {
        $self->{year} = $value;
    }
    return $self->{year};
}

sub month {
    if (@_ == 2) {
        $_[0]->{month} = $_[1];
    }
    return $_[0]->{month};
}

sub day {
    return $_[0]->{day} = @_ == 2 ? $_[1] : $_[0]->{day};
}



use overload 
    '""' => \&stringify;


sub stringify {
    my ($self) = @_;
    return sprintf 'Date(%s, %s, %s)', $self->year, $self->month, $self->day;
}

1;

</code>

<code lang="perl">
use strict;
use warnings;
use 5.010;

use FindBin;
use File::Spec;
use lib File::Spec->catdir($FindBin::Bin, '..', 'lib');
use My::Date;

my $d = My::Date->new(year => 2013, month => 1, day => 27);
say $d->stringify;
say $d;

say ref $d;

use Scalar::Util qw(blessed);
say blessed $d;
</code>


