=title Python Lambda in Perl creating anonymous functions
=timestamp 2014-01-08T18:30:01
=indexes lambda, sub
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

Python has a tool called <hl>lambda</hl> that allows to create anonymous functions on the fly.

=abstract end


In the following example the <hl>make_incrementor</hl> function returns a new, anonymous function.

<h2>In Python using lambda</h2>

<code lang="python">
def make_incrementor(n):
    return lambda x: x + n

f3 = make_incrementor(3)
f7 = make_incrementor(7)

print(f3(2))    #  5
print(f7(3))    # 10
print(f3(4))    #  7
print(f7(10))   # 17
</code>

<h2>In Perl using anonymous functions</h2>

<code lang="perl">
use strict;
use warnings;
use 5.010;

sub make_incrementor {
    my ($n) = @_;
    return sub {
        my ($x) = @_;
        return $x + $n; 
    }
}

my $f3 = make_incrementor(3);
my $f7 = make_incrementor(7);

say $f3->(2);    #  5
say $f7->(3);    # 10
say $f3->(4);    #  7
say $f7->(10);   # 17
</code>

In this code, the variable <hl>$n</hl> stays alive even after the call to <hl>make_incrementor</hl> ends
as it is referenced from the anonymous function returned by <hl>make_incrementor</hl>.

<hl>$f3</hl> and <hl>$f7</hl> are references to the anonymous functions generated and returned by <hl>make_incrementor</hl>.
If we printed out the content of these variables using <hl>say $f3</hl> we would get something like this: <hl>CODE(0x7fe9738032b8)</hl>
revealing the fact that they are indeed references to executable code.

The way to de-reference them is to write: <hl>$f3->(2)</hl>. 


<h2>Perl without extra local variable</h2>

<code lang="perl">
sub make_incrementor {
    my ($n) = @_;
    return sub { $n + shift }
}
</code>

This could be use to replace the above implementation of the <hl>make_incrementor</hl>.




