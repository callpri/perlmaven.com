=title What are string and numeric contexts?
=timestamp 2014-01-23T19:30:01
=indexes context
=status show
=author ovid
=comments_disqus_enable 0

=abstract start

We've already talked about <a href="/scalar-and-list-context-in-perl">scalar
and list context</a>, but what are numeric and string context?

=abstract end

<h2>Understanding "pseudo" contexts in Perl</h2>

What do you think the following lines of code print?

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @first  = ( 'foo', 'bar', 'baz' );
my @second = ( 'this', 'that' );
say @first + @second;
say @first . @second;
</code>

That prints <hl>5</hl> on one line and <hl>32</hl> on the second! What the
heck is going on?

If you were to spend your day reading <a
href="http://perldoc.perl.org/perlglossary.html#S">perldoc perlglossary</a>
(and who wouldn't?), you would notice this entry for <hl>scalar context</hl>:

<blockquote>The situation in which an expression is expected by its
surroundings (the code calling it) to return a single value rather than a list
of values. See also context and list context. A scalar context sometimes
imposes additional constraints on the return valueâ€”see string context and
numeric context.</blockquote>

In other words, after scalar context is applied to a variable, Perl then
decides whether it should be treated as a string or a number. This is part of
the reason why Perl uses the dot (<hl>.</hl>) instead of the plus (<hl>+</hl>)
for concatenation: if it used the plus sign for both concatenation and
addition, how would it know whether or not to treat the scalars as numbers or
strings? <hl>3 + 3</hl> could evaluate to <hl>6</hl> or <hl>33</hl>

Let's look at our example again:

<code lang="perl">
my @first  = ( 'foo', 'bar', 'baz' );
my @second = ( 'this', 'that' );

say @first + @second; 
say @first . @second; 
</code>

The first <hl>say</hl> uses a plus and the second uses the dot operator. In
<hl>perldoc perlop</hl>, under the second <a
href="http://perldoc.perl.org/perlop.html#Additive-Operators">Additive
Operators</a>, it says "binary + returns the sum of two numbers" and "binary .
concatenates two strings". Since we have to evaluate something in scalar
context before we treat it as a string or number, the <hl>@first</hl> array,
having three elements, evaluates to <hl>3</hl> and the <hl>@second</hl> array,
having two elements, evaluates as <hl>2</hl>. The plus operator adds them,
giving us <hl>5</hl> for the first <hl>say</hl>, and the dot operator
concatenates them, giving us <hl>32</hl> for the second <hl>say</hl>.

<hr>
<blockquote>
Curtis "Ovid" Poe offers Perl training and consulting services via <a href="http://www.allaroundtheworld.fr/">All Around The World</a>,
a consultancy based in France. Though having programmed in many languages, he's specialized in Perl for over a
decade and wrote the test harness that ships with Perl. He recently wrote the popular book
<a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-1118013840.html">Beginning Perl</a> (Wrox Press) and is one of the authors of
<a href="http://shop.oreilly.com/product/9780596526740.do">Perl Hacks</a> (O'Reilly).
Ovid sits on the Board of Directors of The Perl Foundation.
</blockquote>
