=title EOF - End of file in Perl
=timestamp 2014-01-22T05:49:01
=indexes eof
=status show
=books beginner
=author szabgab
=comments_disqus_enable 0

=abstract start

As the <a href="/perldoc/eof">documentation of eof</a> also points out, you almost never need to call <hl>eof()</hl> in Perl.
In most cases operations that read from file-handles will return <a href="/undef-and-defined-in-perl">undef</a>
when they reach the end of the file or when they reach the end of the data available.

=abstract end

<h2>Reading text file in while loop</h2>

<hl><$fh></hl>, the "readline" operator in Perl returns <hl>undef</hl> when there is no more to read from the file-handle:

<code lang="perl">
open my $fh, '<', 'data.txt' or die;
while (my $line = <$fh>) {
}
</code>

The same is true for the diamond operator, which is just a special case of the "readline" operator:

<code lang="perl">
while (<>) {
}
</code>

<h2>Reading file in list context</h2>


<code lang="perl">
open my $fh, '<', 'data.txt' or die;
my @lines = <$fh>;
</code>

In this case even checking for <hl>undef</hl> is unnecessary as Perl will just end the operation when the
input is exhausted.

<h2>Reading binary file</h2>

Even when reading binary files using <hl>read</hl> we don't need to check for end of file manually
as <hl>read</hl> will return 0 at the end of file. So we can write:

<code lang="perl">
open my $fh, '<:raw', $file or die;
my $buf;
while (read $fh, $buf, 1000) {
}
</code>


