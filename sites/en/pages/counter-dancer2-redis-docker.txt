=title Counter using Dancer2 and Redis in a Docker container
=timestamp 2021-04-18T07:30:01
=indexes Dancer2, Redis, Docker, docker-container
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0
=show_related 1

=abstract start

In this part of the <a href="https://code-maven.com/counter">counter examples</a> series we have <a href="/dancer">Perl Dancer</a> based application using <a href="https://redis.io/">Redis</a>
as the in-memory cache/database to store the counter.

The code runs in a Docker container and we have another container running the Redis server.

=abstract end

For this example to work we need the 4 files that you can see below (app.psgi, cpanfile, Dockerfile, docker-compose.yml) in a folder and you have to be in
that forlder. You can download the individual files or you can clone the repository of the Perl Maven web site:

<code>
git clone https://github.com/szabgab/perlmaven.com.git
cd perlmaven.com/examples/redis_counter/
</code>

Install Docker and docker-compose then run the command:

<code lang="perl">
docker-compose up
</code>

Then you can visit http://localhost:5001 and keep reloading it to see the counter increase.

Ctrl-C will stop the Docker compose.

<h2>The Dancer code</h2>

<include file="examples/redis_counter/app.psgi">

The name of the server "myredis" was defined in the docker-compose.yml file. See below.

<h2>cpanfile listing Perl dependencies</h2>

<include file="examples/redis_counter/cpanfile">

<h2>Dockerfile for perl and the modules needed</h2>

<include file="examples/redis_counter/Dockerfile">

We install the modules using --notest so the installation will be faster. In a real, non-demo application I'd not do that. I'd want the tests to run to verify that
the modules I install work properly on my installation.

<h2>docker-compose file to bind them all together</h2>

<include file="examples/redis_counter/docker-compose.yml">

<h2>Disk usage</h2>

The volume  storing the redis data:

<code>
docker volume inspect redis_counter_redis-data
</code>

The containers created by docker-compose can be seen:

<code>
docker ps -a
</code>

They are called redis_counter_web_1 and  redis_counter_myredis_1.

<h2>Cleanup</h2>

<code>
docker container rm redis_counter_myredis_1 redis_counter_web_1
docker volume rm redis_counter_redis-data
</code>

