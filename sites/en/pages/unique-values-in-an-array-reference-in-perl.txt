=title Unique values in an array reference in Perl
=timestamp 2015-05-12T11:42:56
=indexes unique, uniq, distinct, filter, grep, array
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

In an earlier article we saw several solutions to <a href="/unique-values-in-an-array-in-perl">filter out duplicate values from an array</a>,
but what if our data is in a reference to an array?

What if we have our data in an array reference like the <hl>$words</hl> in this example:

<code lang="perl">
my @words_array = qw(foo bar baz foo zorg baz);
my $words = \@words_array;
</code>

=abstract end

The solution involves quite a few brackets and braces, but it can still be expressed in one expression:

<code lang="perl">
my $unique = uniq($data);
sub uniq { [ keys { map { $_ => 1 } @{$_[0]} } ] };
</code>

The <hl>uniq</hl> function we created expects a reference to an array and returns a reference to an array.

Before we try to explain the code, let's see if it really works!

Let's create a script with the data and solution we saw earlier:

<code lang="perl">
use strict;
use warnings;
use Data::Dumper;

my @words_array = qw(foo bar baz foo zorg baz);
my $data = \@words_array;

my $unique = uniq($data);
sub uniq { [ keys { map { $_ => 1 } @{$_[0]} } ] };

print Dumper $unique;
</code>

The output will be the following (though the order of the words can be different on every run):

<code>
$VAR1 = [
          'bar',
          'foo',
          'zorg',
          'baz'
        ];
</code>

<h2>B::Deparse</h2>

We have already <a href="/search/B::Deparse">seen</a> the use of <a href="http://metacpan.org/pod/B::Deparse">B::Deparse</a>.
Let's see if it can help us:

I have redureced the <hl>uniq.pl</hl> script to include only the function we try to understand:

<code lang="perl">
sub uniq { [ keys { map { $_ => 1 } @{$_[0]} } ] };
</code>

And ran the following:

<code>
$ perl -MO=Deparse uniq.pl 

keys on reference is experimental at uniq.pl line 1.
sub uniq {
    [keys {map({$_, 1;} @{$_[0];})}];
}
</code>

as I can see, it added parentheses around the parameters of <hl>map</hl> and added <hl>;</hl> in a few places,
but it did not help a lot.

It also gave a warning: <hl>keys on reference is experimental at uniq.pl line 1.</hl>

Let's try B::Deparse with some more parameters:

Adding the <hl>-p</hl> parameter gave us even more parantheses:

<code>
$ perl -MO=Deparse,-p uniq.pl 

keys on reference is experimental at uniq.pl line 1.
sub uniq {
    [keys({map({($_, 1);} @{$_[0];})})];
}
</code>

I am not sure this helped.

<h2>Understanding one expression at a time</h2>

Let's go back to the original expression and let' try to take it apart to understand step-by-step:

<code lang="perl">
sub uniq { [ keys { map { $_ => 1 } @{$_[0]} } ] };
</code>

We could move the expression in the subroution to a separate row and move the closing braces to a third row:

<code lang="perl">
sub uniq {
    [ keys { map { $_ => 1 } @{$_[0]} } ]
};
</code>

A subroutine receives its paramaters in the <hl>@_</hl> array.
The first element of that array is <hl>$_[0]</hl>.

(Just as the first element of <hl>@names</hl> would be <hl>$names[0]</hl>.)

We assume this is a reference to an array and want to de-reference it so we can go over the elements one-by-one.
We do that by putting a <hl>@</hl> in front of the reference.

Explanation: If we had an array reference in <hl>$ar</hl> then we would write <hl>@$ar</hl> to dereference it.
Because we have the array reference in <hl>$_[0]</hl> we could just put the <hl>@</hl> at the beginning: <hl>@$_[0]</hl>,
but then it would not be clear: Did we want to de-reference <hl>$_[0]</hl>; or did we want to de-reference <hl>$_</hl> getting
<hl>@$_</hl>, and then wanted to create an array-slice with the first element only? In order to make this crystal clear
we put curly braces around the expressions that belong together. That's why we write <hl>@{$_[0]}</hl>.

Now that we have the list of values in an array we can use <hl>map</hl> on the array. That's how we get the
expressions <hl>map { $_ => 1 } @{$_[0]}</hl>. This map returns a list of values. Each odd value would be one
of the elements of the original array, and each even value would be the number 1.

The curly braces around the <hl>map</hl> convert these values into a hash reference in which the keys will be the values
from the original array.

Starting from perl 5.14 the <hl>keys</hl> function can work on hash references as well, not only on hashes,
but B::Deparse warns about this. That's the warning <hl>keys on reference is experimental</hl> we saw earlier.

Finally the <hl>keys</hl>function returns a list. We wrap that in square brackets in order to
convert the list into an array reference. This is what the <hl>uniq</hl> function returns.


