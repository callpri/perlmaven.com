=title Matching numbers using Perl regex
=timestamp 2014-05-19T10:25:56
=indexes ^, +, [], *
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

I have a file with lines looking like this:

<code>
Usage:524944/1000000 messages
</code>

How can I match the two numbers and extract them so I can process them later?

=abstract end

Let's see the regex:

The string starts with "Usage:" so the regex will start like this:

<code lang="perl">
/Usage:/
</code>

There is no need to escape the : as in the regexes of Perl 5 the colon is
not a special character.

If we know and require that this will be at the beginning of the string we should say that
explicitly by adding a caret <hl>^</hl> at the beginning.

<code lang="perl">
/^Usage:/
</code>

Maybe we don't need that, so I'll leave out the caret for now.

That string is followed by a number that, as I assume, can have any number of digits.
<hl>\d</hl> matches a single digit, and the <hl>+</hl> quantifier modifies that to have
<b>1 or more digits</b>.

<code lang="perl">
/Usage:\d+/
</code>

So far it is good, but we would like to capture and reuse the number so we put the expression
matching it in parentheses:

<code lang="perl">
/Usage:(\d+)/
</code>

This will allow code like this:

<code lang="perl">
my $str = 'Usage:524944/1000000 messages';
if ( $str =~ /Usage:(\d+)/) {
   my $used = $1;
   # here we will have the 524944 in the $used variable
}
</code>

The next thing is to match the <hl>/</hl>. Because slash is the delimiter of the regular expression
we need to escape that. We write:


<code lang="perl">
/Usage:(\d+)\//
</code>

This is not very nice. Luckily we can modify the delimiters of the regexes in Perl 5 by using the
letter <hl>m</hl> (which stand for matching) at the beginning. This way we can use many other characters
instead of the slash. I personally like a pair of curly braces around the regex because that makes
it very readable:

<code lang="perl">
m{Usage:(\d+)/}
</code>

The / in the original string is followed by another multi-digit number that we want to capture again:

<code lang="perl">
m{Usage:(\d+)/(\d+)}
</code>

That is followed by a space and then the word 'messages'.

<code lang="perl">
m{Usage:(\d+)/(\d+) messages}
</code>

If we would like to make sure that nothing follows this string we can add a <hl>$</hl> sign at the end of the regex:

<code lang="perl">
m{Usage:(\d+)/(\d+) messages$}
</code>

This will make sure, that a string like this: "Usage:524944/1000000 messages sent" won't match.

If we now go back to the earlier example, we could also use the <hl>^</hl> at the beginning:

<code lang="perl">
m{^Usage:(\d+)/(\d+) messages$}
</code>

This would mean we make sure nothing is before the "Usage" and nothing comes after the "messages".

Depending on the situation that might be a good or a bad thing. I'll remove those for the final
example as I think we did not want to enforce that:

<code lang="perl">
my $str = 'Usage:524944/1000000 messages';
if ( $str =~  m{Usage:(\d+)/(\d+) messages} ) {
   my ($used, $total) = ($1, $2);
   # here we will have the 524944 in the $used variable
   # and 1000000 in $total.
}
</code>

<h2>Extra flexibility</h2>

I am not sure how much flexibility we might need there. Maybe that space after the second number might be
several spaces. Maybe even tabs? To allow for that we would use <hl>\s+</hl> for one or more white-spaces.

<code lang="perl">
m{^Usage:(\d+)/(\d+)\s+messages$}
</code>

Maybe there can be spaces and even tabs between the : and the first digit. If we want to allow for that,
we can add <hl>\s*</hl> where the <hl>*</hl> is a quantifier meaning <b>0 or more</b>.

<code lang="perl">
m{^Usage:\s*(\d+)/(\d+)\s+messages$}
</code>

We could even try to make this more readable by adding the <hl>x</hl> modifier at the end. If we use that,
we can add spaces and comment in the regex to make it look nicer:

<code lang="perl">
m{^Usage:
  \s*
  (\d+)/(\d+)    # used / total
  \s+messages
 $}x
</code>


<h2>The data changes</h2>

That's great but at some point the input changed. It now looks like this string:

<code>
Usage:524,944 of 1,000,000 messages
</code>

Instead of trying to change our regex, let's start it from scratch.

This time we already start with the /x modifier to make more space in the regex:

The beginning is the same and we allow for some spaces after the colon:

<code lang="perl">
/^Usage:\s*/x
</code>

Then there is something that contains digits and commas so we create a character class
that can match a single character that is either a digit or a comma: <hl>[\d,]</hl>
and use the <hl>+</hl> quantifier on the character class:

<code lang="perl">
/^Usage:\s*
   [\d,]+
/x
</code>

We would like to capture that number so we put it in parentheses and
I also added a comment for clarification.

<code lang="perl">
/^Usage:\s*
   ([\d,]+)     # used
/x
</code>

After the number there is a space but because of the /x modifier, perl will disregard
any spaces. We take some liberty here and allow both spaces and tabs using <hl>\s</hl>
instead of a space <hl> </hl> on both sides of the "of" word.

<code lang="perl">
/^Usage:\s*
   ([\d,]+)      # used
   \s+of\s+
/x
</code>

That is followed by another number with commas:

<code lang="perl">
/^Usage:\s*
   ([\d,]+)      # used
   \s+of\s+
   ([\d,]+)      # total
/x
</code>

followed by another (few) spaces and the word "messages":

<code lang="perl">
/^Usage:\s*
   ([\d,]+)      # used
   \s+of\s+
   ([\d,]+)      # total
   \s+messages
/x
</code>

This can be used in the <hl>if</hl> statement:

<code lang="perl">
my $str = 'Usage:524,944 of 1,000,000 messages';
if ($str =~ /^Usage:\s*
            ([\d,]+)      # used
            \s+of\s+
            ([\d,]+)      # total
            \s+messages
           /x) {
  my ($used, $total) = ($1, $2);
  ...
}
</code>


Finally if we would like to use the numbers as numbers, we can eliminate the commas
with two global substitutes:

<code lang="perl">
$used =~ s/,//g;
$total =~ s/,//g;
</code>


<h2>Alternatives</h2>

While the above code will work, there are people who like to use regexes in a different way. As the motto of Perl it
TMTOWDI (There's More Than One Way To Do It), let's see these examples:

<code lang="perl">
if (my ($used, $total) = $str =~ /^Usage:\s*
            ([\d,]+)      # used
            \s+of\s+
            ([\d,]+)      # total
            \s+messages
           /x) {
  ...
}
</code>

In this snippet of code we use the feature of <hl>=~</hl> that in <a href="/scalar-and-list-context-in-perl">LIST context</a>,
if there are capturing parentheses, it will return the list created from the strings that were captured by these parentheses.
So instead of having the values in <hl>$1</hl> and in <hl>$2</hl> they arrive directly to <hl>$used</hl> and <hl>$total</hl>.

<h2>Named captures</h2>

Another alternative for people who can use perl 5.10 or later is to use Named Captures.
An example provided by <a href="http://oylenshpeegul.typepad.com/">Tim Heaney (oylenshpeegul)</a>.

<code lang="perl">
#!/usr/bin/env perl

use v5.010;
use strict;
use warnings;

my $str = 'Usage:524944/1000000 messages';

# The manual way.
if ( $str =~ m{Usage:(\d+)/(\d+) messages} ) {
    my ($used, $total) = ($1, $2);
    say "$used $total";
}

# The one-line less way:
if (my ($used, $total) = $str =~ m{Usage:(\d+)/(\d+) messages}) {
    say "$used $total";
}

# Named captures:
if ($str =~ m{Usage:(?<used>\d+)/(?<total>\d+) messages} ) {
    say "$+{used} $+{total}";
}
</code>

<h2>Unicode digits</h2>

<a href="http://nickpatch.net/">Nick Patch</a> thought that it would be important to mention that <hl>\d</hl> may match any Unicode digit.

<code lang="perl">
# the number 3 in eight different numeral systems
perl -Mutf8 -E 'say "٣३၃៣๓໓᠓௩" =~ /^\d+$/ ? "yes" : "no"'
yes
</code>

and that <a href="http://metacpan.org/pod/Regexp::Common">Regexp::Common</a> provides a great out-of-the-box solution for number parsing where
you don't need to worry about Unicode digits or placement of optional commas.

<code lang="perl">
use Regexp::Common qw( number );

$str =~ / Usage: \s* ( $RE{num}{int}{-sep=>',?'} ) /x;
</code>


<h2>Source</h2>

The <a href="http://mail.pm.org/pipermail/pdx-pm-list/2012-February/006339.html">original question</a>
was brought up by <a href="http://dimstar.net/">Russell Johnson</a>
on the mailing list of the <a href="http://pdx.pm.org/">Portland Perl Mongers</a>.

