=title Moo attribute predicate and clearer
=timestamp 2015-03-20T11:50:00
=indexes Moo, predicate, clearer
=status show
=books moo
=author szabgab
=comments_disqus_enable 0

=abstract start

How to check if an attribute has a value without directly accessing the internals of the class?
Fetching the value and checking if it is <hl>undef</hl> is not always the right thing. There
are cases when the value can be legitimately be set to <hl>undef</hl>.
You might need a different way to check if the value has ever been set.

=abstract end

Setting the <hl>predicate</hl> key of an attribute to 1, Moo will
create a corresponding <hl>has_</hl> method that will return
<a href="/boolean-values-in-perl">true of false</a>, depending weather the attribute has
any value (including <hl>undef</hl>) or not.

For example if we have an attribute called 'name', then <hl>predicate => 1</hl>
will tell Moo to generated a method called <hl>has_name</hl>. If we had an attribute
with a leading underscore (e.g. <hl>_age</hl>, then the <hl>predicate => 1</hl>
will prefix it with '_has' and generate <hl>_has_age</hl>

<h2>Example</h2>

Given the following Person.pm module:

<code lang="perl">
package Person;
use Moo;
use 5.010;

has name => (is => 'rw', predicate => 1);

1;
</code>

Let's try the following programming.pl file:

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Person;

my $anonymous = Person->new;
say $anonymous->has_name ? 'has name' : 'no name';

my $anonym = Person->new( name => undef );
say $anonym->has_name ? 'has name' : 'no name';

my $student = Person->new( name => 'Joe' );
say $student->has_name ? 'has name' : 'no name';
</code>

Running <hl>perl programming.pl</hl> will give the following output:

<code>
no name
has name
has name
</code>

In programming.pl we created 3 Person objects and then used 
<hl>say</hl> and the ternary operator to print if it 'has name'
or 'no name'. As you can see above, only in the first case
did <hl>has_name</hl> return false.

That is, setting the value to <hl>undef</hl> still means it has a value.

<h2>predicate in other word</h2>

There might be cases when the <hl>has_</hl> prefix is not a good fit.
Either grammatically, or because you use the <hl>has_</hl> prefix of an attribute
to some other task. For such cases, Moo let's you pick your own word by using that
word as the value in the attribute declaration:

In Person.pm the attribute declaration changes to this:

<code lang="perl">
has name => (is => 'rw', predicate => 'has_a_real_name');
</code>

In programming.pl we also have to update the calls to use the new <hl>has_a_real_name</hl> method:

<code lang="perl">
my $student = Person->new( name => 'Joe' );
say $student->has_a_real_name ? 'has name' : 'no name';
</code>

Once you set an attribute to any value, even <hl>undef</hl>, you cannot make unset.
Well, except if you use a special tool for it called <hl>clearer</hl>.

<h2>clearer</h2>

The <hl>clearer</hl> functionality work really closely together with the predicate.
After calling the clearer method of an attribute, it will seem as if that attribute
was never set to any value.

Setting <hl>clearer => 1;</hl> of an attribute, Moo will create a method with a
<hl>clear_</hl> prefix. For example if the attribute is called <hl>name</hl>, then
the clearer method will be called <hl>clear_name</hl>.

In Person.pm we have this code:

<code lang="perl">
has name => (is => 'rw', predicate => 1, clearer => 1);
</code>

In programming.pl we have this:

<code lang="perl">
my $student = Person->new( name => 'Joe' );
say $student->has_name ? 'has name' : 'no name';

$student->clear_name;
say $student->has_name ? 'has name' : 'no name';
</code>

Running <hl>perl programming.pl</hl> we get:

<code>
has name
no name
</code>

That is, after calling the <hl>clear_name</hl> method, the attribute is gone.

<h2>Interaction with default</h2>

We must ask the question how do these interact with the other options available
for attributes. Most notably, what happens if we 'clear' an attribute that has
a default value?

The Person.pm has this content:

<code lang="perl">
package Person;
use Moo;
use 5.010;

has name => (
    is        => 'rw',
    predicate => 1,
    clearer   => 1,
    default   => 'Foo',
);

1;
</code>

The programming.pl has this:

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Person;

my $student = Person->new();
say $student->has_name ? 'has name' : 'no name';
say $student->name;

$student->clear_name;
say $student->has_name ? 'has name' : 'no name';
say defined $student->name ? 'defined name' : 'not defined name';
</code>

The output is

<code>
has name
Foo
no name
not defined name
</code>

The answer then is that you can totally clear an attribute, the default flag
only applies during the construction of the object.

<h2>Interaction with required</h2>

The same is true with the <hl>required</hl> flag. That too is only checked during construction.
Using a clearer you can still remove any trace of it ever existed in an object.

Person.pm changes to this:

<code lang="perl">
has name => (
    is        => 'rw',
    predicate => 1,
    clearer   => 1,
    default   => 'Foo',
    required  => 1,
);
</code>

programming.pl changes to this as we now have to pass a value to 'name' in the constructor:

<code lang="perl">
my $student = Person->new( name => 'Joe' );
say $student->has_name ? 'has name' : 'no name';
say $student->name;

$student->clear_name;
say $student->has_name ? 'has name' : 'no name';
say defined $student->name ? 'defined name' : 'not defined name';
</code>

and the out is this:

<code>
has name
Joe
no name
not defined name
</code> 


