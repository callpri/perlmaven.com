=title Combining SVG and PSGI
=timestamp 2015-02-26T06:30:01
=indexes SVG, PSGI
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

We have already seen a few <a href="/scalable-vector-graphics-with-perl">examples for SVG with Perl</a>, and we had a
few articles <a href="/psgi">using PSGI</a>. Let's combine the two. This will make it easier to play with SVG as
we can see our results immediately.

=abstract end

This is the basic script:

<include file="examples/svg.psgi">

You can run it using <hl>plackup -r svg.psgi</hl>

it will print this to the console:

<code>
Watching ./lib svg.psgi for file updates.
HTTP::Server::PSGI: Accepting connections at http://0:5000/
</code>

and then you can visit the page at http://127.0.0.1:5000/

You will see a black circle.

<img src="/img/circle.svg" alt="black circle"/>

Now edit the <hl>svg.psgi</hl> file removing the <hl>#</hl> from the lines, (for now keep the fill-opacity line commented out),
and then reload the page. You don't even need to stop and restart the script as <hl>plackup</hl> using the <hl>-r</hl> flag
will automatically reload the script after you saved it.

The page now shows a red circle.

<img src="/img/red_circle.svg" alt="red circle"/>

Then, as another example, let's remove the <hl>#</hl> from the <hl>'fill-opacity' => 0.5,</hl> line as well.
The results in the following:

<img src="/img/red_circle_opacity_05.svg" alt="red circle"/>

You can then go on, make changes to the Perl script and keep checking the result
in your browser.

<h2>Explanation</h2>

A little explanation might be needed. <a href="/psgi">PSGI</a> requires that the application
return a 3-element array reference. The first element is the HTTP status code.
In our example that's <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">200</a> meaning everything is fine.
The second element is the header. Here we set the <hl>Content-type</hl> to be <hl>image/svg+xml</hl>. This will tell the browser
what to do with the content we are sending as the 3rd element which, in our case, is the XML generated by the SVG module.

