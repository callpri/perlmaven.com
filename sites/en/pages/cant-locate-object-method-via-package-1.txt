=title Can't locate object method "..." via package "1" (perhaps you forgot to load "1"?)
=timestamp 2015-02-05T18:30:01
=indexes context
=status show
=books beginner
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

This is a fun error message.

=abstract end

Given a function and a function call that look like these:

<code lang="perl">
sub do_something {
    my $object = @_;

    $object->method;
}

print "before\n";
do_something('some data');
print "after\n";
</code>

We get the following output:

<code>
$ perl code.pl

before
Can't locate object method "method" via package "1" (perhaps you forgot to load "1"?) at code.pl line 4.
</code>

This is a run-time error, as we can see by the fact that 'before' was printed but 'after' not.

If we had called the function this way:

<code lang="perl">
print "before\n";
do_something();
print "after\n";
</code>

we would get:

<code>
before
Can't locate object method "method" via package "0" (perhaps you forgot to load "0"?) at code.pl line 4.
</code>


By this difference, can you already guess what was that <hl>package "1"</h> that is now <hl>package "0"</hl>?


<h2>The explanation</h2>

The problem is that in the <hl>do_something</hl> subroutine we assigned the <hl>@_</hl> to a scalar variable that put it in <a href="/scalar-and-list-context-in-perl">SCALAR context</a>.
In scalar context an array will return its size. The <a href="/length-of-an-array">number of elements of the array</a>. In the first case there was one parameter and so perl assigned
the number 1 to the variable <hl>$object</hl>. In the second case there were no parameters and thus Perl assigned the number 0 to <hl>$object</hl>.

What if we call <hl>do_something</hl> with two parameters?

<code lang="perl">
do_something('foo', 'bar');
</code>

<code>
Can't locate object method "method" via package "2" (perhaps you forgot to load "2"?) at code.pl line 4.
</code>

Not surprisingly (any more), perl assigned the number 2 to <hl>$object</hl>.

The solution is to put the left-hand-side of the assignment in parentheses, thereby providing <a href="/scalar-and-list-context-in-perl">LIST context</a> to the array
that will then copy its elements to the list on the left hand side. If the list contains a single scalar variable then the first element of the
array will be assigned to that variable.

So the function declaration should look like this:

<code lang="perl">
sub do_something {
    my ($object) = @_;

    $object->method;
}
</code>


