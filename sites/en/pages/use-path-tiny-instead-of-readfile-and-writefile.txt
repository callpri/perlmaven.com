=title use Path::Tiny instead of home-made ReadFile and WriteFile
=timestamp 2016-02-12T06:30:01
=indexes Path::Tiny, slurp, spew
=status show
=books cpan_co_maintainer
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Now that we have made the <a href="/run-perl-tidy-to-beautify-the-code">Perl code look nice</a>,
we can start cleaning up the constructs in the code and convert them to beetter expressions based
in the current <b>best practices</b>. For this we are going to use <a href="https://metacpan.org/pod/Perl::Critic">Perl::Critic</a>.

=abstract end

<h2>Running perlcritic on the tests</h2>

I ran <hl>perlcritic t/*.t</hl> which gave me a full page of output. The beginning looked like this:

<code>
t/cut.t: Bareword file handle opened at line 67, column 2.  See pages 202,204 of PBP.  (Severity: 5)
t/cut.t: Two-argument "open" used at line 67, column 2.  See page 207 of PBP.  (Severity: 5)
t/cut.t: Bareword file handle opened at line 77, column 2.  See pages 202,204 of PBP.  (Severity: 5)
t/cut.t: Two-argument "open" used at line 77, column 2.  See page 207 of PBP.  (Severity: 5)
...
</code>


When looking at line 67 and line 77 of the <hl>t/cut.t</hl> file I saw the following:

<code lang="perl">
sub ReadFile {
       my $file = shift;
       open( FILE, $file ) or return '';
       local $/;
       undef $/;
       my $contents = <FILE>;
       close FILE;
       $contents;
}

sub WriteFile {
       my ( $file, $contents ) = @_;
       open( FILE, ">$file" ) or die "Can't open $file: $!\n";
       print FILE $contents;
       close FILE;
}
</code>

and around the file I saw rows like these:

<code lang="perl">
my $content = ReadFile("filename");

...

WriteFile("filename", "content");
</code>

The <hl>ReadFile</hl> function is an implementation of the  <a href="/slurp">slurp-mode</a>. It could be fixed, or
it could be replaced by either <a href="https://metacpan.org/pod/File::Slurp">File::Slurp</a>, or by the <hl>slurp</hl>
method of <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a>.

Because Path::Tiny seems to be the most modern implementation I've replace the above code with the following:

<code lang="perl">
use Path::Tiny qw(path);
</code>

<code lang="perl">
my $content = path("filename")->slurp;

...

path( "filename" )->spew( "content" );
</code>

I made similar changes to a number of other test-files.

I also had to add Path::Tiny to Makefile.PL as a prerequisite.

<a href="https://github.com/szabgab/Pod-Tree/commit/6e207f45030609bbb2ac34ab6fe95d333ccc0c7c">commit</a>

