=title Does the 'all' function of List::MoreUtils really short-circuit?
=timestamp 2014-11-19T07:30:01
=indexes List::MoreUtils, all
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

The other day, someone on a mailing list asked <a href="/check-several-regexes-on-many-strings">how to check several regexes on many strings</a>.
In that article I recommended the use of the <hl>all</hl> function of <a href="https://metacpan.org/pod/List::MoreUtils">List::MoreUtils</a>
as a more compact way to write that code, but the question remained: Does it short-circuit?

Will that check all the values even if after checking two it already knows the answer?

=abstract end

We could of course read the source code of that module, but I found it more interesting to write a script that will allow us
to see it in action.

The following script has two arrays, in <hl>@yes</hl> every value is <a href="/boolean-values-in-perl">true</a>,
in <hl>@not</hl> they are all true, except one of them: the number 0 is <a href="/boolean-values-in-perl">false</a>.

At first we check two solutions, one of the is using <a href="/filtering-values-with-perl-grep">grep</a> to return
the list of values that are true: <hl>grep { $_ } @array</hl>. Then we compare that with the original array
using <hl>==</hl>. This puts them in <a href="/scalar-and-list-context-in-perl">scalar context</a> which means we
are actually comparing the number of elements in the original array and the number of element <hl>grep</hl> returned.
<hl>@array == grep { $_ } @array</hl>. We could have been more explicit with the scalar context writing:
<hl>(scalar @array == scalar grep { $_ } @array</hl>

We print the result of the comparison.

In the second solution we just use the <hl>all</hl> function imported from <a href="http://metacpan.org/pod/List::MoreUtils">List::MoreUtils</a>:
<hl>all { $_ } @array</hl>

<code lang="perl">
use strict;
use warnings;
use 5.010;

use List::MoreUtils qw(all);

my @yes = (1, 2, 3, 4, 5);
my @not = (6, 7, 0, 8, 9);

say 'yes: ', (@yes == grep { $_ } @yes);   # yes: 1
say 'no:  ', (@not == grep { $_ } @not);   # no:

say 'all yes: ', all { $_ } @yes;          # all yes: 1
say 'all no:  ', all { $_ } @not;          # all no:
</code>

Next to each line I added the result. As you can see, they yes-lines printed 1 (the true value)
and the no-lines printed only the text. They returned false.

Now let's add a print-statement (or rather a say-statement) to both solutions.
We now have <hl>{ say; $_ }</hl> in each expression.
That is, in each block we have two statement. The first is <hl>say</hl> without any parameter.
It will default to print the content of <hl>$_</hl>. The second statement is <hl>$_</hl> itself
that needs to be examined by <hl>grep</hl> and <hl>all</hl>.

This way, as <hl>grep</hl> and <hl>all</hl> iterate over the elements in the <hl>@yes</hl> and <hl>@not</hl> arrays,
we will also see them printed. (I also added a separation line to make it easier to see what was printed from the "grep"
and what from the "all".

<code lang="perl">
use strict;
use warnings;
use 5.010;
use List::MoreUtils qw(all);

my @yes = (1, 2, 3, 4, 5);
my @not = (6, 7, 0, 8, 9);

say 'yes: ', (scalar @yes == scalar grep { say; $_ } @yes);
say 'no:  ', (scalar @not == scalar grep { say; $_ } @not);
say '----';

say 'all yes: ', all { say; $_ } @yes;
say 'all no:  ', all { say; $_ } @not;
</code>

The output:

<code>
1
2
3
4
5
yes: 1
6
7
0
8
9
no:
----
1
2
3
4
5
all yes: 1
6
7
0
all no:
</code>

Before the separation line all the numbers were printed. 1-5 from <hl>@yes</hl> and 6,7,0,8,9 from <hl>@not</hl>.
Below the separation line all the number were printed from <hl>@yes</hl>, but in the <hl>@not</hl> array the printing
has stopped after the first false value was found.

<h2>Conclusion</h2>

The <hl>all</hl> function imported from List::MoreUtils will only check the cases as long as they return true.
If any of them returns false <hl>all</hl> will already know that it needs to return <hl>false</hl> and returns it immediately.
This is especially important when there are lots of elements in the array to be checked and/or when each comparison is
expensive.


