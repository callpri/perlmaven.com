=title An extra space can ruin your day
=timestamp 2016-02-18T22:30:01
=indexes B::Deparse, =!
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

The other day I got request for help finding out why a certain script prints lot of
<a href="/use-of-uninitialized-value">Use of uninitialized value</a> warnings.

For the untrained eyes the warnings were really strange.

=abstract end

The original script that generated the warnings is this:

<include file="examples/maze.pl">

It generates tons of this triplet:

<code>
Use of uninitialized value $_ in pattern match (m//) at maze.pl line 21.
Use of uninitialized value $1 in hash element at maze.pl line 22.
Use of uninitialized value within %full in concatenation (.) or string at maze.pl line 22.
</code>

That looks really strange, especially that <hl>$_</hl> is not even used in this script.
At least not intentionally. Can you spot the problem?

<h2>Simplified example</h2>

<include file="examples/maze_extract.pl">

This will generate the following 4 warnings:

<code>
Use of uninitialized value $_ in pattern match (m//) at maze_extract.pl line 6.
Use of uninitialized value $1 in print at b.pl line 7.
Use of uninitialized value $_ in pattern match (m//) at maze_extract.pl line 6.
Use of uninitialized value $1 in print at b.pl line 7.
</code>

Did this make it easier to spot the problem?

<h2>B::Deparse</h2>

Let's see what does <a href="https://metacpan.org/pod/B::Deparse">B::Deparse</a> think.

I ran <hl>perl -MO=Deparse,-p maze_extract.pl and got the following output:

<include file="examples/maze_extract_deparsed.pl">

This might help noticing that Perl first applies the <hl>~</hl> operator to <hl>/(\d+)/</hl>
and then uses <hl>=</hl> to assign the result to <hl>$text</hl>.

WHAT ??

<h2>= ~</h2>

The problem is that the regex operator was not written correctly. It should be <hl>=~</hl>
without any spaces between the two characters, but because there was a space, Perl understood
that we wanted to use the <hl>~</hl>
the <a href="https://metacpan.org/pod/distribution/perl/pod/perlop.pod#Bitwise-String-Operators">Bitwise operator</a>
on the <b>result</b> of <hl>/(\d+)/</hl> applied to the content of <a href="/the-default-variable-of-perl">$_</a>,
the default variable of Perl.

The thing that my be less well known is that if we have a regex expression such as
<hl>/(\d+)/</hl> which is not preceded by the <hl>=~</hl> regex operator, then it
is applied to the content of <hl>$_</hl>. This is a nice default when used properly,
but it can be surprising when it is used by mistake as in this case.

So we had the warning about <hl>$_</hl> being uninitialized because it was really
<a href="/undef-and-defined-in-perl">undefined</a>. Actually we were lucky that it
was undefined, otherwise we might get a match on some string that is totally
unrelated to our intention. It is usually much better to get a warning or an error,
than to get get an incorrect value without any notification.

Then the problem keeps growing. After the regex was executed, we apply the
<hl>~</hl> bitwise operator to its return value and then the <hl>=</hl>
will act as an assignment operator and thus the result of <hl>~</hl> is
assigned to the <hl>$txt</hl> variable replacing its original content.
Then the <hl>if</hl> checks if this value is <a href="/boolean-values-in-perl">some true value</a>.
It usually is, so we enter the block of the <hl>if</hl> statement where we'll get further
warnings.
<hl>$1</hl> is undefined because there was no match at all and thus we get a warning when we
are trying to use it and then in the original example this triggers a 3rd type of warning.

<h2>The solution</h2>

The solution is to write <hl>=~</hl> without any space between the two characters.

<h2>The danger of silence</h2>

Just to show a contrived example in which we set <hl>$_</hl> to some unrelated string:

<include file="examples/maze_extract_silent.pl">

If we run this code, it will print "4242" and won't show any warnings.

If this happens to us we'll really scratch our head, especially because the assignment
to <hl>$_</hl> might happen at some code far away from our function, or might even
happen implicitly, without us ever mentioning <hl>$_</hl>.

In this case we might not even notice the problem, after all we don't get any warning,
until much later as we receive incorrect results.

<h2>Conclusion</h2>

Space matters.
