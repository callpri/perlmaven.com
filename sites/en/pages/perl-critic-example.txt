=title Perl::Critic example - lint for Perl
=timestamp 2015-12-02T10:40:01
=indexes Perl::critic, perlcritic, lint
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

<a href="https://metacpan.org/pod/Perl::Critic">Perl::Critic</a> is a
<a href="http://en.wikipedia.org/wiki/Lint_(software)">lint</a>-like
tool for Perl. It uses static analysis (it does not run your code) and
provides a list of places where the code violates one of the policy rules.

Originally based on the book
<a href="http://shop.oreilly.com/product/9780596001735.do">Perl Best Practices</a> written
by <a href="http://damian.conway.org/">Damian Conway</a>, the module is extendable and customizable.
You, or your team can set up your own standard, and use Perl::Critic to enforce it.

=abstract end

The <a href="https://metacpan.org/pod/Perl::Critic">Perl::Critic</a> module
comes with a command line tool called <b>perlcritic</b>, but you
can also integrate the use of Perl::Critic in your unit-tests via
the <a href="http://metacpan.org/pod/Test::Perl::Critic">Test::Perl::Critic</a>
wrapper.

As an example, let's see the results of the default, the most gentle level of criticism
of a script I saw recently. Let's also add some commentary.

<h2>Code before strictures are enabled</h2>

<code>
$ perlcritic example.pl
Bareword file handle opened at line 1, column 1.  See pages 202,204 of PBP.  (Severity: 5)
Two-argument "open" used at line 1, column 1.  See page 207 of PBP.  (Severity: 5)
Code before strictures are enabled at line 1, column 1.  See page 429 of PBP.  (Severity: 5)
</code>

This report was given for the following code:

<code lang="perl">
open FH, $filename or die;
</code>

Let's start with the third entry. It complains about that fact that there is no <hl>use strict;</hl>.
As I recommend, one should <a href="/strict">always use strict!</a>

So I changed the code and ran <hl>perlcritic again.

<code lang="perl">
use strict;
open FH, $filename or die;
</code>

<h2>Bareword file handle and Two-argument "open"</h2>

This time the output was this:

<code>
Bareword file handle opened at line 2, column 1.  See pages 202,204 of PBP.  (Severity: 5)
Two-argument "open" used at line 2, column 1.  See page 207 of PBP.  (Severity: 5)
</code>

A <a href="/barewords-in-perl">bareword</a> is a series of characters (like the FH in the above code snippet) without
quotes around them, or without a sigil in-front of them. They can be used in some places, but in file-handles they are not recommended any more.

The recommendation is to <a href="/open-files-in-the-old-way">always use lexical variables for file-handles and always use 3-parameter open</a>.

Based on the recommendation on <a href="/how-to-improve-my-perl-program">how to improve perl script</a> I've updated the script to
have this code:

<code lang="perl">
use strict;
open my $fh, '<:encoding(UTF-8)', $filename or die;
</code>

That was the <b>gentle</b> level of Perl::Critic. Let's make it a bit more <b>stern</b>
by running <hl>perlcritic --stern example.pl</hl>:

<h2>Exclude specific policy violations</h2>

This is the output I got:

<code>
Code not contained in explicit package at line 1, column 1.  Violates encapsulation.  (Severity: 4)
Close filehandles as soon as possible after opening them at line 2, column 1.  See page 209 of PBP.  (Severity: 4)
Module does not end with "1;" at line 2, column 1.  Must end with a recognizable true value.  (Severity: 4)
Code before warnings are enabled at line 2, column 1.  See page 431 of PBP.  (Severity: 4)
</code>

Out of these 4 violations two relate to the fact that we write a script and not a module. We don't really want to care about
those and so we would like to turn those off. There are a number of ways to do that, one of them is to provide the
names of the rules on the command line with the <hl>--exclude</hl> flag.

In order to find out the names we need to exclude we can run <hl>perlcritic --stern --verbose 8 examples.pl</hl> that will
display the following output:

<code>
[Modules::RequireExplicitPackage] Code not contained in explicit package at line 1, column 1.  (Severity: 4)
[InputOutput::RequireBriefOpen] Close filehandles as soon as possible after opening them at line 2, column 1.  (Severity: 4)
[Modules::RequireEndWithOne] Module does not end with "1;" at line 2, column 1.  (Severity: 4)
[TestingAndDebugging::RequireUseWarnings] Code before warnings are enabled at line 2, column 1.  (Severity: 4)
</code>

From that we create the following command:

<hl>perlcritic --stern --exclude RequireExplicitPackage --exclude RequireEndWithOne  example.pl</hl>

will print this:

<code>
Close filehandles as soon as possible after opening them at line 2, column 1.  See page 209 of PBP.  (Severity: 4)
Code before warnings are enabled at line 2, column 1.  See page 431 of PBP.  (Severity: 4)
</code>


<h2>Close filehandles as soon as possible after opening them</h2>

tells use that we should call <hl>close $fh</hl> soon after calling <hl>open</hl>.

<h2>Code before warnings are enabled</h2>

tells us to add <hl>use warnings;</hl> at the beginning of the code just as it is explained in
the article that asks you to 
<a href="/always-use-strict-and-use-warnings">always use warnings</a>


<h2>More levels of perlcritic</h2>

The <hl>perlcritic</hl> command line tool actually has 5 levels of severity. So far we tried level 5 and 4
corresponding to the words "gentle" and "stern". The other 3 levels are "harsh", "cruel", and "brutal"
creating a growing level of pain. You can try them and see what kind of violations they report on your code.


